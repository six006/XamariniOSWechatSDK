// The first step to creating a binding is to add your native library ("libNativeLibrary.a")
// to the project by right-clicking (or Control-clicking) the folder containing this source
// file and clicking "Add files..." and then simply select the native library (or libraries)
// that you want to bind.
//
// When you do that, you'll notice that MonoDevelop generates a code-behind file for each
// native library which will contain a [LinkWith] attribute. VisualStudio auto-detects the
// architectures that the native library supports and fills in that information for you,
// however, it cannot auto-detect any Frameworks or other system libraries that the
// native library may depend on, so you'll need to fill in that information yourself.
//
// Once you've done that, you're ready to move on to binding the API...
//
//
// Here is where you'd define your API definition for the native Objective-C library.
//
// For example, to bind the following Objective-C class:
//
//     @interface Widget : NSObject {
//     }
//
// The C# binding would look like this:
//
//     [BaseType (typeof (NSObject))]
//     interface Widget {
//     }
//
// To bind Objective-C properties, such as:
//
//     @property (nonatomic, readwrite, assign) CGPoint center;
//
// You would add a property definition in the C# interface like so:
//
//     [Export ("center")]
//     CGPoint Center { get; set; }
//
// To bind an Objective-C method, such as:
//
//     -(void) doSomething:(NSObject *)object atIndex:(NSInteger)index;
//
// You would add a method definition to the C# interface like so:
//
//     [Export ("doSomething:atIndex:")]
//     void DoSomething (NSObject object, int index);
//
// Objective-C "constructors" such as:
//
//     -(id)initWithElmo:(ElmoMuppet *)elmo;
//
// Can be bound as:
//
//     [Export ("initWithElmo:")]
//     IntPtr Constructor (ElmoMuppet elmo);
//
// For more information, see https://aka.ms/ios-binding


using System;
using Foundation;
using ObjCRuntime;
using UIKit;
using WechatSDK.WXApiObject;

namespace WechatSDK.WXApi
{
	// @protocol WXApiDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]	
	//[BaseType(typeof(Xamarin.Forms.Platform.iOS.FormsApplicationDelegate), Delegates = new string[] { "WeakDelegate" })]
	interface WXApiDelegate
	{
		// @optional -(void)onReq:(BaseReq * _Nonnull)req;
		[Export("onReq:")]
		void OnReq(BaseReq req);

		// @optional -(void)onResp:(BaseResp * _Nonnull)resp;
		[Export("onResp:")]
		void OnResp(BaseResp resp);
	}

	// @protocol WXApiLogDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface WXApiLogDelegate
	{
		// @required -(void)onLog:(NSString * _Nonnull)log logLevel:(WXLogLevel)level;
		[Abstract]
		[Export("onLog:logLevel:")]
		void LogLevel(string log, WXLogLevel level);
	}

	// @interface WXApi : NSObject
	[BaseType(typeof(NSObject))]
	interface WXApi
	{
		// +(BOOL)registerApp:(NSString * _Nonnull)appid universalLink:(NSString * _Nonnull)universalLink;
		[Static]
		[Export("registerApp:universalLink:")]
		bool RegisterApp(string appid, string universalLink);

		// +(BOOL)handleOpenURL:(NSURL * _Nonnull)url delegate:(id<WXApiDelegate> _Nullable)delegate;
		[Static]
		[Export("handleOpenURL:delegate:")]
		bool HandleOpenURL(NSUrl url, [NullAllowed] WXApiDelegate @delegate);

		// +(BOOL)handleOpenUniversalLink:(NSUserActivity * _Nonnull)userActivity delegate:(id<WXApiDelegate> _Nullable)delegate;
		[Static]
		[Export("handleOpenUniversalLink:delegate:")]
		bool HandleOpenUniversalLink(NSUserActivity userActivity, [NullAllowed] WXApiDelegate @delegate);

		// +(BOOL)isWXAppInstalled;
		[Static]
		[Export("isWXAppInstalled")]
		//[Verify(MethodToProperty)]
		bool IsWXAppInstalled { get; }

		// +(BOOL)isWXAppSupportApi;
		[Static]
		[Export("isWXAppSupportApi")]
		//[Verify(MethodToProperty)]
		bool IsWXAppSupportApi { get; }

		// +(NSString * _Nonnull)getWXAppInstallUrl;
		[Static]
		[Export("getWXAppInstallUrl")]
		//[Verify(MethodToProperty)]
		string WXAppInstallUrl { get; }

		// +(NSString * _Nonnull)getApiVersion;
		[Static]
		[Export("getApiVersion")]
		//[Verify(MethodToProperty)]
		string ApiVersion { get; }

		// +(BOOL)openWXApp;
		[Static]
		[Export("openWXApp")]
		//[Verify(MethodToProperty)]
		bool OpenWXApp { get; }

		// +(void)sendReq:(BaseReq * _Nonnull)req completion:(void (^ _Nullable)(BOOL))completion;
		[Static]
		[Export("sendReq:completion:")]
		void SendReq(BaseReq req, [NullAllowed] Action<bool> completion);

		// +(void)sendResp:(BaseResp * _Nonnull)resp completion:(void (^ _Nullable)(BOOL))completion;
		[Static]
		[Export("sendResp:completion:")]
		void SendResp(BaseResp resp, [NullAllowed] Action<bool> completion);

		// +(void)sendAuthReq:(SendAuthReq * _Nonnull)req viewController:(UIViewController * _Nonnull)viewController delegate:(id<WXApiDelegate> _Nullable)delegate completion:(void (^ _Nullable)(BOOL))completion;
		[Static]
		[Export("sendAuthReq:viewController:delegate:completion:")]
		void SendAuthReq(SendAuthReq req, UIViewController viewController, [NullAllowed] WXApiDelegate @delegate, [NullAllowed] Action<bool> completion);

		// +(void)startLogByLevel:(WXLogLevel)level logBlock:(WXLogBolock _Nonnull)logBlock;
		[Static]
		[Export("startLogByLevel:logBlock:")]
		void StartLogByLevel(WXLogLevel level, WXLogBolock logBlock);

		// +(void)startLogByLevel:(WXLogLevel)level logDelegate:(id<WXApiLogDelegate> _Nonnull)logDelegate;
		[Static]
		[Export("startLogByLevel:logDelegate:")]
		void StartLogByLevel(WXLogLevel level, WXApiLogDelegate logDelegate);

		// +(void)stopLog;
		[Static]
		[Export("stopLog")]
		void StopLog();
	}
}
